#encoding=utf-8

# decorator.py
# Python implementation of Decorator design-model
# Generated by Elvis
# Created on: 1-may-2016

class Person():
    def __init__(self, name):
        self.name = name

    def decorator(self, component):
        self.component = component

    def show(self):
        print '%s is wearing cloths' % self.name
        self.component.show()


class Finery():
    def __init__(self):
        self.component = None

    def decorator(self, component):
        self.component = component

    def show(self):
        if self.component:
            self.component.show()


class TShirt(Finery):
    def show(self):
        Finery.show(self)
        print 'wearing TShirst'


class Trouser(Finery):
    def show(self):
        Finery.show(self)
        print 'wearing Trouser'


class Shoe(Finery):
    def show(self):
        Finery.show(self)
        print 'wearing shoes'


class Tie(Finery):
    def show(self):
        Finery.show(self)
        print 'wrering Tie'


if __name__ == '__main__':
    
    person = Person('kevin')
    
    tshirt = TShirt()
    trouser = Trouser()
    shoe = Shoe()
    tie = Tie()

    trouser.decorator(tshirt)   
    shoe.decorator(trouser)
    tie.decorator(shoe)
    person.decorator(tie)
    person.show()
    