#coding=utf8

# adapter.py
# Python implementation of Adapter design-model
# Generated by Elvis
# Created on: 1-may-2016

import datetime
    
class Calculator:
    def printInfo(self):
        print unicode('This is a calculator','utf-8').encode('gbk')
        
class AgeCalculator(Calculator):
    def __init__(self, birthday):
        self.year, self.mouth, self.day = (int(i) for i in birthday.split('-'))
    def calculator_age(self, date):
        year, mouth, day = (int(i) for i in date.split('-'))
        age = year - self.year
        if (mouth, day) < (self.mouth, self.day):
            age -= 1
        return age
    
class DateAgeAdaptor(Calculator):
    def _str_date(self, date):
        return date.strftime('%Y-%m-%d')
    def __init__(self, birthday):
        birthday = self._str_date(birthday)
        self.calculator = AgeCalculator(birthday)
    def get_age(self, date):
        date = self._str_date(date)
        print (self.calculator.calculator_age(date))
        
if __name__ == '__main__':  
    birthdate = str(raw_input("Please input the data(%Y,%m,%d): "))
    birthdate = datetime.datetime.strptime(birthdate,'%Y,%m,%d')
    calcudate = datetime.date.today()
#    birthdate = datetime.date(1993,8,27) 
#    calcudate = datetime.date(2016,5,1) 
    adapter = DateAgeAdaptor(birthdate)
    adapter.get_age(calcudate)

    
    
